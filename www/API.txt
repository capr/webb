WEBB API
------------------------------------------------------------------------------
CONFIG CACHING REQUEST OUTPUT JSON TEMPLATES ACTIONS QUERY MAIL SESSION USERS

TODO:

CONFIG

	config(name[, default_val]) -> val		get/set config value
	S(name[, default_val])						get/set internationalized string

CACHING

	once(f)											memoize function for current request

REQUEST

	headers([h]) -> v | t
	GET([name]) -> v | t
	POST([name]) -> t | t
	lang() -> s										get current language based on ?lang=
	absurl([path]) -> s							get the absolute url for a path
	domain() -> s									get website domain
	email([user]) -> s							get email address of user or 'no-reply'
	client_ip() -> s								get client's ip address

	uint_arg(s) -> n | nil						validate unsigned integer arg
	str_arg(s) -> s | nil						validate/trim non-empty string arg
	enum_arg(s, values...) -> s | nil		validate enum arg

	check(ret[, err]) -> ret					exit with "file not found"
	allow(ret[, err]) -> ret					exit with "forbidden"

OUTPUT

	push_outbuf()									push output buffer
	pop_outbuf() -> s								pop output buffer and return it
	out(s)											output a string
	print(...)										print, setting text/plain

JSON

	json(s) -> t									decode json
	json(t) -> s									encode json


FILESYSTEM

	basepath(file) -> path						get filesystem path (unchecked)
	filepath(file) -> path						get filesystem path if file exists

MARKDOWN TEMPLATES

	render(name, env) -> s						render markdown template name.lang.m

LP TEMPLATES

	include(name[, env])							execute LuaPages template name.lp

ACTIONS

	parse_path() -> name, args...				parse URI path
	action(name, args...)						execute action

QUERY

	quote(s) -> s									quote sql string
	print_queries([t|f]) -> t|f				control printing of queries
	query(s, args...) -> res					query and return result table
	query1(s, args...) -> t						query and return first row
	iquery(s, args...) -> id					query and return insert id
	changed(res) -> t|f							check if any rows were updated
	atomic(func)									execute func in transaction
	groupby(res, col) -> t						group rows by a column


QUERY/DDL

	qsubst(typedef)								create a substitution definition
	qmacro.<name> = f(args...)					create a macro definition

	nodrop([t|f]) -> t|f							control effect
	dropfk(name)									drop foreign key
	droptable(name)								drop table
	fk(tbl, col, ...)								create a foreign key

MAIL

	sendmail(from, rcpt, subj, msg, html)	send mail via smtp to local server

SESSION

	session_uid() -> uid
	authenticate(auth) -> uid
	set_pass(pass)									set password for current user
	send_auth_token(email)
	login(auth) -> uid							login
	uid() -> uid									get current user id
	logout() -> uid								logout, and get an anonymous uid
	admin() -> t|f
	editmode() -> t|f

USERS

	touch_usr()										update user's atime

